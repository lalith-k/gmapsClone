{"version":3,"file":"polyline.umd.js","sources":["../lib/lib/index.ts"],"sourcesContent":["import type { LineString, Position } from \"geojson\";\n\n// https://github.com/mapbox/polyline/blob/master/src/polyline.js\n\n// Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n//\n// Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n// by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n\nfunction py2_round(value: number) {\n  // Google's polyline algorithm uses the same rounding strategy as Python 2,\n  // which is different from JS for negative values\n  return Math.floor(Math.abs(value) + 0.5) * (value >= 0 ? 1 : -1);\n}\n\nfunction encodeNumber(current: number, previous: number, factor: number) {\n  current = py2_round(current * factor);\n  previous = py2_round(previous * factor);\n  let coordinate = current - previous;\n  coordinate <<= 1;\n  if (current - previous < 0) {\n    coordinate = ~coordinate;\n  }\n  let output = \"\";\n  while (coordinate >= 0x20) {\n    output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n    coordinate >>= 5;\n  }\n  output += String.fromCharCode(coordinate + 63);\n  return output;\n}\n\nfunction resultChange(result: number) {\n  return result & 1 ? ~(result >> 1) : result >> 1;\n}\n\n/**\n * Decodes any string into a [longitude, latitude] coordinates array.\n *\n * Any string is a valid polyline, but if you provide this\n * with an arbitrary string, it'll produce coordinates well\n * outside of the normal range.\n */\nexport function decode(str: string, precision: number = 5): Position[] {\n  const factor = Math.pow(10, precision);\n  let index = 0;\n  let lat = 0;\n  let lng = 0;\n  const coordinates = [];\n  let shift = 0;\n  let result = 0;\n  let byte = null;\n\n  let latitude_change: number;\n  let longitude_change: number;\n\n  // Coordinates have variable length when encoded, so just keep\n  // track of whether we've hit the end of the string. In each\n  // loop iteration, a single coordinate is decoded.\n  while (index < str.length) {\n    // Reset shift, result, and byte\n    byte = null;\n    shift = 0;\n    result = 0;\n\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result |= (byte & 0x1f) << shift;\n      shift += 5;\n    } while (byte >= 0x20);\n\n    latitude_change = resultChange(result);\n\n    shift = result = 0;\n\n    do {\n      byte = str.charCodeAt(index++) - 63;\n      result |= (byte & 0x1f) << shift;\n      shift += 5;\n    } while (byte >= 0x20);\n\n    longitude_change = resultChange(result);\n\n    lat += latitude_change;\n    lng += longitude_change;\n\n    coordinates.push([lng / factor, lat / factor]);\n  }\n\n  return coordinates;\n}\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param coordinates Coordinates, in longitude, latitude order\n * @returns encoded polyline\n */\nexport function encode(coordinates: number[][], precision: number = 5) {\n  if (!coordinates.length) {\n    return \"\";\n  }\n  const factor = Math.pow(10, precision);\n\n  let output =\n    encodeNumber(coordinates[0][1], 0, factor) +\n    encodeNumber(coordinates[0][0], 0, factor);\n\n  for (let i = 1; i < coordinates.length; i++) {\n    const a = coordinates[i];\n    const b = coordinates[i - 1];\n    output += encodeNumber(a[1], b[1], factor);\n    output += encodeNumber(a[0], b[0], factor);\n  }\n\n  return output;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param geojson A LineString\n */\nexport function geoJSONToPolyline(geojson: LineString, precision: number = 5) {\n  return encode(geojson.coordinates, precision);\n}\n\n/**\n * Decodes to a GeoJSON LineString geometry.\n *\n * @param str An encoded polyline as a string.\n */\nexport function polylineToGeoJSON(str: string, precision: number = 5): LineString {\n  const coords = decode(str, precision);\n  return {\n    type: \"LineString\",\n    coordinates: coords,\n  };\n}\n"],"names":["py2_round","value","Math","floor","abs","encodeNumber","current","previous","factor","coordinate","output","String","fromCharCode","resultChange","result","decode","str","precision","pow","index","lat","lng","coordinates","latitude_change","longitude_change","shift","byte","length","charCodeAt","push","encode","i","a","b","geojson","type"],"mappings":"iPASA,SAASA,EAAUC,GAGjB,OAAOC,KAAKC,MAAMD,KAAKE,IAAIH,GAAS,KAAQA,GAAS,EAAI,GAAK,EAChE,CAEA,SAASI,EAAaC,EAAiBC,EAAkBC,GAGvD,IAAIC,GAFJH,EAAUN,EAAUM,EAAUE,KAC9BD,EAAWP,EAAUO,EAAWC,IAEhCC,IAAe,EACXH,EAAUC,EAAW,IACvBE,GAAcA,GAEhB,IAAIC,EAAS,GACb,KAAOD,GAAc,IACnBC,GAAUC,OAAOC,aAA4C,IAA9B,GAAqB,GAAbH,IACvCA,IAAe,EAGjB,OADAC,GAAUC,OAAOC,aAAaH,EAAa,IACpCC,CACT,CAEA,SAASG,EAAaC,GACpB,OAAgB,EAATA,IAAeA,GAAU,GAAKA,GAAU,CACjD,UASgBC,EAAOC,EAAaC,EAAoB,GACtD,MAAMT,EAASN,KAAKgB,IAAI,GAAID,GAC5B,IAAIE,EAAQ,EACRC,EAAM,EACNC,EAAM,EACV,MAAMC,EAAc,GACpB,IAIIC,EACAC,EALAC,EAAQ,EACRX,EAAS,EACTY,EAAO,KAQX,KAAOP,EAAQH,EAAIW,QAAQ,CAEzBD,EAAO,KACPD,EAAQ,EACRX,EAAS,EAET,GACEY,EAAOV,EAAIY,WAAWT,KAAW,GACjCL,IAAkB,GAAPY,IAAgBD,EAC3BA,GAAS,QACFC,GAAQ,IAEjBH,EAAkBV,EAAaC,GAE/BW,EAAQX,EAAS,EAEjB,GACEY,EAAOV,EAAIY,WAAWT,KAAW,GACjCL,IAAkB,GAAPY,IAAgBD,EAC3BA,GAAS,QACFC,GAAQ,IAEjBF,EAAmBX,EAAaC,GAEhCM,GAAOG,EACPF,GAAOG,EAEPF,EAAYO,KAAK,CAACR,EAAMb,EAAQY,EAAMZ,GACvC,CAED,OAAOc,CACT,UAQgBQ,EAAOR,EAAyBL,EAAoB,GAClE,IAAKK,EAAYK,OACf,MAAO,GAET,MAAMnB,EAASN,KAAKgB,IAAI,GAAID,GAE5B,IAAIP,EACFL,EAAaiB,EAAY,GAAG,GAAI,EAAGd,GACnCH,EAAaiB,EAAY,GAAG,GAAI,EAAGd,GAErC,IAAK,IAAIuB,EAAI,EAAGA,EAAIT,EAAYK,OAAQI,IAAK,CAC3C,MAAMC,EAAIV,EAAYS,GAChBE,EAAIX,EAAYS,EAAI,GAC1BrB,GAAUL,EAAa2B,EAAE,GAAIC,EAAE,GAAIzB,GACnCE,GAAUL,EAAa2B,EAAE,GAAIC,EAAE,GAAIzB,EACpC,CAED,OAAOE,CACT,oDAOkCwB,EAAqBjB,EAAoB,GACzE,OAAOa,EAAOI,EAAQZ,YAAaL,EACrC,+BAOkCD,EAAaC,EAAoB,GAEjE,MAAO,CACLkB,KAAM,aACNb,YAHaP,EAAOC,EAAKC,GAK7B"}